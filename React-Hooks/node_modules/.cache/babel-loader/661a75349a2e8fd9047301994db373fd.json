{"ast":null,"code":"import _slicedToArray from \"/home/javier/Trabajo_PW/prueba-fran/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/javier/Trabajo_PW/prueba-fran/src/Contador.js\";\n// importamos useState, el hook para crear un state en nuestro componente\nimport React, { useState } from \"react\";\nexport function Contador() {\n  // useState recibe un parámetro: el valor inicial del estado\n  // y devuelve un array de dos posiciones:\n  //  la primera (count), tiene el valor del estado\n  //  la segunda (setCount), el método para actualizar el estado\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        count = _useState2[0],\n        setCount = _useState2[1];\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, \"Has hecho click \", count, \" veces\"), React.createElement(\"button\", {\n    onClick: () => setCount(count + 1),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, \"Haz click!\"));\n}","map":{"version":3,"sources":["/home/javier/Trabajo_PW/prueba-fran/src/Contador.js"],"names":["React","useState","Contador","count","setCount"],"mappings":";;AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAO,SAASC,QAAT,GAAoB;AACzB;AACA;AACA;AACA;AAJyB,oBAKCD,QAAQ,CAAC,CAAD,CALT;AAAA;AAAA,QAKlBE,KALkB;AAAA,QAKXC,QALW;;AAOzB,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAoBD,KAApB,WADF,EAEE;AAAQ,IAAA,OAAO,EAAE,MAAMC,QAAQ,CAACD,KAAK,GAAG,CAAT,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,CADF;AAMD","sourcesContent":["// importamos useState, el hook para crear un state en nuestro componente\nimport React, { useState } from \"react\";\n\nexport function Contador() {\n  // useState recibe un parámetro: el valor inicial del estado\n  // y devuelve un array de dos posiciones:\n  //  la primera (count), tiene el valor del estado\n  //  la segunda (setCount), el método para actualizar el estado\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>Has hecho click {count} veces</p>\n      <button onClick={() => setCount(count + 1)}>Haz click!</button>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}
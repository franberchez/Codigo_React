{"expireTime":9007200828843515000,"key":"transformer-remark-markdown-html-41c03004cbd89ae4841d0536b4c9a0d3-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<p>Tras conocer los conceptos básicos del <a href=\"../jsx\">lenguaje JSX</a> y del directorio que hemos generado, pasaremos a profundizar sobre el concepto de <strong>DOM</strong> y la base de React JS, los <strong>componentes</strong>.</p>\n<p> </p>\n<h2>DOM</h2>\n<p> El DOM es la estructura de objetos que genera el navegador cuando se carga un documento y se puede alterar mediante Javascript para cambiar dinámicamente los contenidos y aspecto de la página.</p>\n<p>En nuestra aplicación tomaremos un nodo raíz, y todo lo que esté dentro de él será manejado por React DOM, el cual lo renderiza: <code class=\"language-text\">ReactDOM.render()</code></p>\n<p>La principal tarea de React DOM es comparar el elemento que le pasamos con el elemento anterior, y aplicar las actualizaciones necesarias en el DOM, es decir, actualiza el contenido del árbol cuando este cambia.</p>\n<p>Para aclarar conceptos, vamos a realizar un ejemplo en el que crearemos un reloj:</p>\n<p> \n<img src=\"../images/Ejemplo_reloj.png\" alt=\"Ops, esta imagen no ha cargado\"></p>\n<p> \nEn el ejemplo, el cual puedes probar <a href=\"https://codepen.io/Javier_Herrero/pen/RwwVVMm\">aquí</a>, podemos observar el siguiente método:</p>\n<ul>\n<li><code class=\"language-text\">setInterval(function,delay)</code>: El cual llama a <em>function</em> cada <em>delay</em> milisegundos.</li>\n</ul>\n<p>Como hemos comentado, <code class=\"language-text\">ReactDOM.render()</code> solamente actualiza el elemento del DOM que cambia, en este caso es la hora.</p>\n<p> </p>\n<h2>¿Qué es un componente?</h2>\n<p>Cualquier aplicación basada en React JS se contruye mediante componentes. Los componentes permiten separar la interfaz de usuario en piezas independientes, reutilizables y pensar en cada pieza de forma aislada. De forma coloquial, los componentes son como las funciones de JavaScript. Aceptan entradas arbitrarias (llamadas props) y devuelven a React elementos los cuales describen lo que debe aparecer en pantalla.</p>\n<h2>Tipos de componentes</h2>\n<p>Existen dos tipos de componentes en React:</p>\n<ul>\n<li>Elementos funcionales</li>\n<li>Elementos de clase </li>\n</ul>\n<p> </p>\n<h3><strong>Componentes funcionales</strong></h3>\n<p>Son aquellos componentes que generan elementos React, es decir, solo se encargan de mostrar datos. Un componente funcional puede aceptar argumentos, mediante un objeto <em>props</em> el cual contiene ciertos datos. Para comprenderlo mejor, veamos un ejemplo:</p>\n<p> \n<img src=\"../images/Ejemplo_Props.png\" alt=\"Ops, esta imagen no ha cargado\"></p>\n<p> \nEstos componentes pueden aceptar argumentos. Estos argumentos son de un objeto <em>props</em>, el cual acepta parámetros, variables, arrays, condicionales, u otros elementos de React. Por ejemplo, aquí acepta el nombre, y lo muestra en pantalla\nPuedes probar el ejemplo <a href=\"https://codepen.io/Javier_Herrero/pen/qBBjWYK?editors=0010\">aquí</a></p>\n<p> </p>\n<h3><strong>Ejemplo de aplicacion</strong></h3>\n<p>Ahora pasemos a realizar un ejemplo, vamos a crear una simple lista de tareas por asignaturas. Primero comenzamos por crear un elemento que liste cada tarea:</p>\n<p> \n<img src=\"../images/Tarea.png\" alt=\"Ops, esta imagen no ha cargado\"></p>\n<p> \nDespués crearemos un componente que liste las tareas por asignatura. Este elemento tendrá un título referido a la asignatura, y una serie de tareas, que será un array, en este caso con 2 elementos:</p>\n<p> \n<img src=\"../images/ListaTareas.png\" alt=\"Ops, esta imagen no ha cargado\"></p>\n<p> \nActo seguido creamos el componente que creará el encabezado, y que mostrará el número total de tareas que tenemos:</p>\n<p> \n<img src=\"../images/Header.png\" alt=\"Ops, esta imagen no ha cargado\"></p>\n<p> \nPor último, creamos el componente principal, el primero que será invocado desde el archivo <em>index.js</em>, y que invocará a los demás componentes. Este componente invoca en primer lugar a <em>Header</em> y <em>ListaTareas</em> que a su vez invocará al componente <em>Tarea</em>:</p>\n<p> \n<img src=\"../images/AppTareas.png\" alt=\"Ops, esta imagen no ha cargado\"></p>\n<p> \nPor último desde el archivo <em>index.js</em> invocamos a ‘AppTareas’. Previamente hemos de exportarla desde <em>App.js</em> mediante el comando:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">export default AppTareas;</code></pre></div>\n<p> \n<img src=\"../images/Invocar_AppTareas.png\" alt=\"Ops, esta imagen no ha cargado\"></p>\n<p> \n<strong>El código de esta aplicación lo tienes <a href=\"https://github.com/JavierHerreroGG1/JavierHerreroGG1.github.io/tree/master/codigo\">aqui</a></strong></p>\n<p> </p>\n<h3><strong>Componentes de clase</strong></h3>"}
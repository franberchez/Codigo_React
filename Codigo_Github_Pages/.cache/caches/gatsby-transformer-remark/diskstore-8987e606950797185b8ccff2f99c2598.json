{"expireTime":9007200829195633000,"key":"transformer-remark-markdown-html-f5dcb17ed6ee70f799b371b3bb669a09-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<p>Los hooks son una nueva API de la librería de React que nos permite tener estado, y otras características de React, en los componentes creados con una <strong>function</strong>. Esto antes no era posible ya que estabamos obligados a crear un componente <strong>class</strong> para poder acceder a todas las posibilidades de la librería. Sin embargo, con los hooks podemos enganchar nuestros componentes funcionales a todas las características de React.</p>\n<h2>Funcionamiento</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// importamos useState, el hook para crear un state en nuestro componente\nimport React, { useState } from &#39;react&#39;\n\nfunction Contador() {\n  // useState recibe un parámetro: el valor inicial del estado (que será 0)\n  // y devuelve un array de dos posiciones:\n  // la primera (count), tiene el valor del estado\n  // la segunda (setCount), el método para actualizar el estado y el cual podemos llamarlo como queramos al igual que count\n  const [count, setCount] = useState(0)\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Has hecho click {count} veces&lt;/p&gt;\n      { /* actualizamos el state al hacer click con setCount */ }\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;\n        Haz click!\n      &lt;/button&gt;\n    &lt;/div&gt;\n  )\n}</code></pre></div>\n<p>En el ejemplo usamos el hook <strong>useState</strong> con el objetivo de hacer que nuestro componente funcional <strong>Contador</strong> tenga un estado interno. Podemos observar que hay varios aspectos cambinates en cuanto a la forma original de usar el componente <strong>class</strong> de React. Podemos observar que la forma de modificarle el estado o <strong>state</strong> es diferente, ya que si nos fijamos ya no usamos el tradicional <strong>this.setState</strong>, si no que ahora lo actualizamos usando el método que hemos definido en el ejemplo <strong>setCount</strong> cuyo único propósito es modificar el valor del contador.</p>\n<p>Otro ejemplo pero con referenciado condicional y haciendo uso de los hooks sería el siguiente:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React, { useState } from &#39;react&#39;\n\nconst Door = () =&gt; {\n  const [open, setOpen] = useState(false)\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;La puerta esta {open ? &#39;abierta&#39; : &#39;cerrada&#39;}&lt;/h1&gt;\n      &lt;button onClick={() =&gt; setOpen(!open)}&gt;\n        {open ? &#39;Cerrar&#39; : &#39;Abrir&#39;}\n      &lt;/button&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default Door</code></pre></div>\n<h2>¿El por qué de los Hooks?</h2>\n<h3>Las clases confunden a las personas y a las máquinas</h3>\n<p>Para las personas pueden suponer un obstáculo a la hora de empezar a trabajar con React y entender su correcto funcionamiento, asi como para las máquinas, siendo uno de los motivos más importantes el hecho de que las clases no minifican (hacer el código mas liviano o sencillo) tan bien como las funciones, lo que implicá que el código para implementarlo ocupará más.</p>\n<h3>Era difícil reutilizar la lógica de los componentes</h3>\n<p>Aunque la reutilización de componentes era una de las grandes bazas de React, existía cierta limitación a la hora de reurilizar la lógica interna de cada componente. Por lo que a lo largo de la vida de esta librería se han intentando buscar soluciones al problema. Primero surgieron los <strong>Mixins</strong> que acabaron resultando demasiado complejos, luego surgieron los <strong>HoC (High Order Components)</strong>, a continuación los <strong>Render Props</strong> y por último surgió el asunto que nos ocupa que son los <strong>Hooks</strong> como solución al problema.</p>\n<h3>Los componentes complejos acababan siendo difíciles de entender</h3>\n<p>El ciclo de vida de los componentes de React, que podíamos usar en los componentes con <strong>class</strong>, era una pontentísima forma de ejecutar código, aunque se presentaba la complejidad de entender lo que podía hacer un componente.</p>\n<h3>Algunas aclaraciones</h3>\n<ul>\n<li>El uso de los Hooks es completamente opcional, es decir, no es obligatorio usarlos para crear una aplicación con React.</li>\n<li>Los Hooks son 100% compatibles con versiones anteriores.</li>\n<li>Ya se encuentran disponibles para utilizarlos.</li>\n</ul>\n<h2>Enlaces de ínteres</h2>\n<ul>\n<li><a href=\"https://midu.dev/react-hooks-introduccion-saca-todo-el-potencial-sin-class/\">https://midu.dev/react-hooks-introduccion-saca-todo-el-potencial-sin-class/</a></li>\n<li><a href=\"https://es.reactjs.org/docs/hooks-intro.html\">https://es.reactjs.org/docs/hooks-intro.html</a></li>\n<li><a href=\"https://ed.team/blog/introduccion-los-hooks-de-react\">https://ed.team/blog/introduccion-los-hooks-de-react</a></li>\n</ul>"}
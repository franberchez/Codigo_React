{"expireTime":9007200828843515000,"key":"transformer-remark-markdown-html-4d8b9cf6b462d2ae530207ab7584a549-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<p>En React JS podemos usar operadores condicionales para verificar si un valor cumple con ciertos requisitos.</p>\n<p>El renderizado condicional en React funciona de la misma forma que lo hacen las condiciones en JavaScript, ya que usa operadores como <strong>if</strong> o el <strong>operador condicional</strong> con el objetivo de crear elementos que represente el estado actual, dejando que React actualice la interfaz de usuario para emparejarlos.</p>\n<p>Un ejemplo de como podemos utilizar el referenciado condicional sería el siguiente.</p>\n<p>Primero consideramos estos dos componentes:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function Saludo(props) {\n  return &lt;h1&gt;Hola, ¿como estás?&lt;/h1&gt;;\n}\n\nfunction Despedida(props) {\n  return &lt;h1&gt;Adiós, ya nos veremos.&lt;/h1&gt;;\n}</code></pre></div>\n<p>Lo que vamos a crear a continuación es un componente <strong>Saludos</strong> que nos servirá para mostrar por pantalla uno de los dos componentes que hemos expuesto previamente:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function Saludos(props) {\n  const accion = props.accion;\n  if (accion) {\n    return &lt;Saludo /&gt;;\n  }\n  return &lt;Despedida /&gt;;\n}\n\nReactDOM.render(\n  // Intenta cambiar acccion={false}:\n  &lt;Saludos accion={false} /&gt;,\n  document.getElementById(&#39;root&#39;)\n);</code></pre></div>\n<p>Podemos ver su funcionamiento más claro en <a href=\"https://codepen.io/franberchez/pen/LYYeOyj\">CodePen</a>.</p>\n<h2>Variable de elementos</h2>\n<p>Podemos utilizar variables para almacenar elementos, lo que puede ayudarnos a renderizar condicionalmente una parte del componente mientras el resto del resultado no cambia.</p>\n<p>Utilizando el mismo ejemplo de antes podemos asignar el saludo y la despedida a un botón:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function SaludoButton(props) {\n  return (\n    &lt;button onClick={props.onClick}&gt;\n      Saludo\n    &lt;/button&gt;\n  );\n}\n\nfunction DespedidaButton(props) {\n  return (\n    &lt;button onClick={props.onClick}&gt;\n      Despedida\n    &lt;/button&gt;\n  );\n}</code></pre></div>\n<p>Y para cambiar el estado de los botones al pulsarlos lo que vamos a utilizar será el componente de estado <strong>SaludoControl</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class SaludoControl extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handlesaludoClick = this.handlesaludoClick.bind(this);\n    this.handledespedidaClick = this.handledespedidaClick.bind(this);\n    this.state = {accion: true};\n  }\n\n  handlesaludoClick() {\n    this.setState({accion: true});\n  }\n\n  handledespedidaClick() {\n    this.setState({accion: false});\n  }\n\n  render() {\n    const accion = this.state.accion;\n    let button;\n\n    if (accion) {\n      button = &lt;DespedidaButton onClick={this.handledespedidaClick} /&gt;;\n    } else {\n      button = &lt;SaludoButton onClick={this.handlesaludoClick} /&gt;;\n    }\n\n    return (\n      &lt;div&gt;\n        &lt;Saludos accion={accion} /&gt;\n        {button}\n      &lt;/div&gt;\n    );\n  }\n}\n\nReactDOM.render(\n  &lt;SaludoControl /&gt;,\n  document.getElementById(&#39;root&#39;)\n);</code></pre></div>\n<p>Podemos ver su funcionamiento más claro en <a href=\"https://codepen.io/franberchez/pen/gOOoXeZ?editors=1010\">CodePen</a>.</p>\n<h2>Operadores condicionales</h2>\n<p>Podemos utilizar algunos operadores condicionales cuando estamos trabajando con React que nos proporcionaran diferentes funcionalidades.</p>\n<p>Entre estos operadores lógicos encontramos el <strong>&#x26;&#x26;</strong> que va junto con una expresión que está encerrada entre llaves y que se evalua junto con un valor <strong>true</strong> o un valor <strong>false</strong>, por lo que si la condición es <strong>true</strong>, los elementos después del operador lógico <strong>&#x26;&#x26;</strong> se imprimirán, en caso de ser <strong>false</strong> se igonorará y no se imprimirá.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function VideoJuegos(props) {\n  const nojugados = props.nojugados;\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;¡Recuerda!&lt;/h1&gt;\n      {nojugados.length &gt; 0 &amp;&amp;\n        &lt;h2&gt;\n          Aún te quedan {nojugados.length} juegos por jugar.\n        &lt;/h2&gt;\n      }\n    &lt;/div&gt;\n  );\n}\n\n// Prueba a aumentar el numero de veces que aparece juego aumentando a su vez Re: en 1 cada vez que pongas juego\nconst juegos = [&#39;Juego&#39;, &#39;Re: Juego&#39;, &#39;Re:Re: Juego&#39;, &#39;Re:Re:Re: Juego&#39;];\nReactDOM.render(\n  &lt;VideoJuegos nojugados={juegos} /&gt;,\n  document.getElementById(&#39;root&#39;)\n);</code></pre></div>\n<p>Ver en <a href=\"https://codepen.io/franberchez/pen/xxxpjeB?editors=1010\">CodePen</a>.</p>\n<p>Otra forma que tenemos de usar el referenciado condicional es el <strong>If-else</strong> para el cual encontramos el siguiente operador condicional <strong>condicion ? true : false</strong>.</p>\n<p><strong>AQUI HAY OTRO EJEMPLO DE REACT QUE NO SE SI PONER</strong></p>\n<h2>Evitar que el componente se renderice</h2>\n<p>Hay casos excepcionales en los que es posible que queramos que un componente se oculte a sí mismo aunque ya haya sido renderizado por otro componente. Lo que podemos hacer es cambiar el comportamiento de dicho componente haciendo que devuelva <strong>null</strong> en vez del resultado renderizado.</p>\n<p><strong>AQUI HAY OTRO EJEMPLO DE REACT QUE NO SE SI PONER</strong></p>\n<h2>Enlaces de interés</h2>\n<ul>\n<li><a href=\"https://es.reactjs.org/docs/conditional-rendering.html\">https://es.reactjs.org/docs/conditional-rendering.html</a></li>\n<li><a href=\"http://blog.nubecolectiva.com/renderizando-elementos-con-operadores-logicos-en-react-js/\">http://blog.nubecolectiva.com/renderizando-elementos-con-operadores-logicos-en-react-js/</a></li>\n</ul>"}
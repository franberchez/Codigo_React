{"expireTime":9007200828843515000,"key":"transformer-remark-markdown-html-97621712c6331c62226429fb5f8bfd7d-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<p>Como vimos anteriormente, React cuenta con dos tipos de componentes, los componentes funcionales y los componentes de clase. Pasemos a profundizar sobre estos últimos.</p>\n<p> </p>\n<h1>Componentes de clase</h1>\n<p>La principal diferencia entre los componentes de clase y los funcionales son los estados y los ciclos de vida, Pero primero, vamos a ver cómo trabajar con un componente de clase.</p>\n<p> </p>\n<h2>Ejemplo de componente de clase</h2>\n<p>Los componentes de clase tienen dos propiedades: <strong>this.state</strong> y <strong>this.props</strong>. La clase cuenta con una funcion <em>render()</em>, la cual se encarga de renderizar el componente en el navegador, y es llamada automáticamente cuando el componente se crea o cambia de estado. Para renderizar un componente de clase, lo invocamos como un componente funcional. En este <a href=\"https://codepen.io/Javier_Herrero/pen/wvvrvrK?editors=0010\">ejemplo</a> puedes comprobar el uso de <em>this.props</em> en un componente de clase.</p>\n<p> </p>\n<h2><strong>Estados</strong></h2>\n<p>Como hemos comentado, todo componente de clase tiene un estado. Es manejado por la variable state, y es actualizado mediante <em>setState()</em>, el cual fusiona los atributos del objeto actualizador con el estado del componente anterior.</p>\n<p>En el siguiente ejemplo puedes ver cómo se establece el estado de un componente que es un botón, y como se actualiza cuando es pulsado:</p>\n<p><img src=\"../images/Componentes_Clase/Estados.png\" alt=\"Ops, esta imagen no ha cargado\"></p>\n<p> \nEste ejemplo lo puedes probar <a href=\"https://codepen.io/Javier_Herrero/pen/YzzYKKw?editors=0010\">aquí</a>.</p>\n<p> </p>\n<h2><strong>Ciclos de vida</strong></h2>\n<p>Todos los componentes siguen unos ciclos de vida, mediante los siguientes métodos podemos modificar el comportamiento del componente en cada uno de ellos.</p>\n<p> </p>\n<ul>\n<li><strong>Constructor</strong>: El estado se inicializa mediante el constructor.Este se ejecuta antes de que el componente sea montado en el DOM. Al método <em>constructor()</em> hay que pasarle <em>props</em> como parámetro, e invocar a super() para activar correctamente el componente.</li>\n</ul>\n<p><img src=\"../images/Componentes_Clase/Constructor.png\" alt=\"Ops, esta imagen no ha cargado\"></p>\n<ul>\n<li><strong>componentDidMount</strong>: Este método se ejecuta cuando el componente se ha montado en el DOM.</li>\n<li><strong>componentWillReceiveProps</strong>: Este método se ejecuta cuando el componente recibe nuevas props desde otro componente.</li>\n<li><strong>componentWillUpdate o shouldComponentUpdate</strong>: Este método se ejecuta antes de realizar el <em>render()</em> en el componente, cuando se han recibido nuevos estados o <em>props</em>.</li>\n<li><strong>componentDidUpdate</strong>: Este método se ejecuta justo después de que el componente haya sido actualizado y renderizado en el DOM.</li>\n<li><strong>componentWillUnmount</strong>: Este método se ejecuta antes de que el componente sea destruido o eliminado del DOM.</li>\n</ul>"}